<?xml version="1.0" encoding="UTF-8"?>
<operation id="54591112-80da-4556-8ea4-11d4e7e41451">
  <descriptionCdata><![CDATA[54591112-80da-4556-8ea4-11d4e7e41451.description=<pre>\nGets a value (or list of values in the same field/column) from a csv formatted wmi query.\n      \ninputs\:\n    CSV_Formatted_WMI - The WMI output.\n    value_name - The value to read. Reads first value if null.\n\nResponses\:\n    success - value read.\n    failure - Value could not be found.\n</pre>
]]></descriptionCdata>
  <annotation>54591112-80da-4556-8ea4-11d4e7e41451.description</annotation>
  <name>WMI CSV Value Getter</name>
  <categories/>
  <inputs>
    <userInputBinding id="8d09ba8b-4cfe-4c2e-9eef-c2c138476d62">
      <annotation></annotation>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>CSV_Formatted_WMI</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="449fe076-1f42-4e66-a297-87a0fb8f558a">
      <annotation></annotation>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>value_name</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <scriptlet id="8591d624-c73d-49b6-b6f1-7ae2d8a53c2c">
    <annotation></annotation>
    <name>Operation WMI CSV Value Getter (b67e71b3-5d36-48bd-9ba6-d8f159c7da4d)</name>
    <script>scriptletResponse = &quot;success&quot;;
scriptletResult = &quot;&quot;;
try{
for (k=0;k&lt;CSV_Formatted_WMI.length;k++)
    if ((CSV_Formatted_WMI.charAt(k)==&quot;\n&quot;)&amp;&amp;(CSV_Formatted_WMI.charAt(k+1)!=&quot; &quot;))
        CSV_Formatted_WMI=CSV_Formatted_WMI.substring(0,k)+&apos;^&apos;+CSV_Formatted_WMI.substring(k+1, CSV_Formatted_WMI.length)
rows = new java.util.StringTokenizer(CSV_Formatted_WMI, &quot;^&quot;);

row = rows.nextToken();
st = new java.util.StringTokenizer(row, &quot;,&quot;);
var label = &quot;&quot;;
if (st==null || rows == null || !rows.hasMoreTokens()) {
  scriptletResponse = &quot;failure&quot;;
}
else {
	var tokens = st.countTokens();
	var element = &quot;&quot;;
	if(typeof(value_name) == &apos;undefined&apos; || value_name == &quot;&quot;) {
        element = st.nextToken();
        i=1;
    }
    else {
	for (i=0;element.toLowerCase() != value_name.toLowerCase();i++)
		element = st.nextToken();
	}
 	//var row = st.nextToken();
	var val = &quot;&quot;;
	var run = false;
	var firstIndex = -1;
	while (rows.hasMoreTokens()){
	 	row = trim(rows.nextToken());
		while (isAllWhitespace(row) &amp;&amp; rows.hasMoreTokens)
			row = trim(rows.nextToken());
		if (isAllWhitespace(row))
			break;
		st = new java.util.StringTokenizer(row, &quot;,\&quot;&quot;);
		var curr = &quot;&quot;;
		
		for (j=0;j&lt;i &amp;&amp; st.hasMoreTokens();j++) {
		     if ( (row.indexOf(&quot;\&quot;&quot;) == -1) || (row.indexOf(&quot;,&quot;) &gt; -1 &amp;&amp; row.indexOf(&quot;,&quot;) &lt; row.indexOf(&quot;\&quot;&quot;)) ){
		         firstIndex = row.indexOf(&quot;,&quot;);
		         curr = replaceAll(st.nextToken(&quot;,&quot;),&quot;\&quot;\&quot;&quot;,&quot;\&quot;&quot;);
		         row = row.substring(firstIndex + 1);
		     }
		     else{
		         firstIndex = row.indexOf(&quot;\&quot;&quot;);
		         curr = replaceAll(st.nextToken(&quot;\&quot;&quot;),&quot;\&quot;\&quot;&quot;,&quot;\&quot;&quot;);
		         row = row.substring(firstIndex + 1);
		         row = row.substring(row.indexOf(&quot;\&quot;&quot;)+2);
		     }
		     st = new java.util.StringTokenizer(row, &quot;,\&quot;&quot;);
		}
		if (j &lt; i)
			curr = &quot;     &quot;;	
		if (!run)
			val += curr;
		else
			val += &quot;,&quot;+curr;
		run = true;
	}
	scriptletResult = &quot;&quot;+val;
    }
}
catch (e){
  scriptletResponse = &quot;failure&quot;;
	scriptletResult = &quot;&quot;+e.toString();
}


function trim(value){
var s = &quot;&quot;+value;
s.replace(/^\s*|\s*$/g, &quot;&quot;)
/*try{
while (s.length &gt; 0 &amp;&amp; isWhitespace(s.substring(0,1)))
	s = s.substring(1, s.length);
while (s.length &gt; 0 &amp;&amp; isWhitespace(s.substring(s.length-1,s.length)))
	s = s.substring(0, s.length-1);
}
catch (e){
return s;
}*/
return s;
}

function replaceAll(string, oldString, newString){
var returnedString = &quot;&quot;;
while (string.indexOf(oldString) &gt; -1){
    returnedString += string.substring(0,string.indexOf(oldString)) + newString;
    string = string.substring(string.indexOf(oldString)+oldString.length);
}
returnedString += string;
return returnedString;
}

function isAllWhitespace(v){
if (v == &quot;&quot; || v == null)
	return true;
/*for (count = 0; count &lt; v.length(); count++)
	if (!isWhitespace(v))
		return false;*/
return false;
}


function isWhitespace(value){
	if (value == &quot;\s&quot; ||
		value ==&quot;\n&quot; ||
		value == &quot;\r&quot;||
		value == &quot;\t&quot;||
		value == &quot;\f&quot;||
		value == &quot;\v&quot;||
		value == &quot;\0&quot;||
		value == &quot;\b&quot;||
		value == &quot; &quot;||
		value == &quot;\a&quot;||
		value == &quot;\e&quot;||
		value == &quot;\u2029&quot;||
		value == &quot;\u00A0&quot;||
		value == &quot;\u2028&quot;||
		value == &quot;\u2020&quot;||
		value == &quot;\cZ&quot;||
		value == &quot;\cz&quot;||
		value == &quot;\x20&quot;||
		value == &quot;&quot;)
		//java.lang.Character.isISOControl(value.charAt(0)))
		return true;
	else
		return false;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="901e2381-5509-46ef-b801-def8d492f509">
      <annotation></annotation>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="63492907-7ff4-42dc-99ec-c354abed64bf">
      <annotation></annotation>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="9fb7d159-6e04-47e1-b303-34aa1443bfb8">
    <annotation></annotation>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="84f38fb9-ae09-4aa5-bb7e-ded341778b6f">
    <baseIcon>wrench.png</baseIcon>
    <basePath>Utilities/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="928d3198-f044-402f-ace3-7c85b410e21d">
        <baseIcon>view.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>